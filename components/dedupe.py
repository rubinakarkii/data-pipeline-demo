import logging

from pyspark.sql.functions import first, array_distinct, collect_list

def merge_duplicates_from_transformed_data(transformed_data):
    logging.info("Finding and merging duplicates")
    merged_df = transformed_data.groupBy("_id").agg(
        first("_id").alias("_id"),
        first("address").alias("address"),
        first("agentInfo").alias("agentInfo"),
        first("biosDescription").alias("biosDescription"),
        first("cloudProvider").alias("cloudProvider"),
        first("created").alias("created"),
        first("dnsHostName").alias("dnsHostName"),
        first("fqdn").alias("fqdn"),
        first("id").alias("id"),
        first("isDockerHost").alias("isDockerHost"),
        first("lastComplianceScan").alias("lastComplianceScan"),
        first("lastLoggedOnUser").alias("lastLoggedOnUser"),
        first("lastSystemBoot").alias("lastSystemBoot"),
        first("lastVulnScan").alias("lastVulnScan"),
        first("manufacturer").alias("manufacturer"),
        first("model").alias("model"),
        first("modified").alias("modified"),
        first("name").alias("name"),
        first("networkGuid").alias("networkGuid"),
        array_distinct(collect_list("networkInterface.list")).alias("networkInterface"),
        array_distinct(collect_list("openPort.list")).alias("openPort"),
        array_distinct(collect_list("processor.list")).alias("processor"),
        array_distinct(collect_list("software.list")).alias("software"),
        array_distinct(collect_list("sourceInfo.list")).alias("sourceInfo"),
        array_distinct(collect_list("tags.list")).alias("tags"),
        first("timezone").alias("timezone"),
        first("totalMemory").alias("totalMemory"),
        first("trackingMethod").alias("trackingMethod"),
        first("type").alias("type"),
        array_distinct(collect_list("volume.list")).alias("volume"),
        array_distinct(collect_list("vuln.list")).alias("vuln"),
        first("cid").alias("cid"),
        first("agentLoadFlags").alias("agentLoadFlags"),
        first("agentLocalTime").alias("agentLocalTime"),
        first("agentVersion").alias("agentVersion"),
        first("biosManufacturer").alias("biosManufacturer"),
        first("biosVersion").alias("biosVersion"),
        first("configIdBase").alias("configIdBase"),
        first("configIdBuild").alias("configIdBuild"),
        first("configIdPlatform").alias("configIdPlatform"),
        first("cpuSignature").alias("cpuSignature"),
        first("externalIp").alias("externalIp"),
        first("macAddress").alias("macAddress"),
        first("instanceId").alias("instanceId"),
        first("serviceProvider").alias("serviceProvider"),
        first("serviceProviderAccountId").alias("serviceProviderAccountId"),
        first("hostname").alias("hostname"),
        first("firstSeen").alias("firstSeen"),
        first("lastSeen").alias("lastSeen"),
        first("localIp").alias("localIp"),
        first("majorVersion").alias("majorVersion"),
        first("minorVersion").alias("minorVersion"),
        first("os").alias("os"),
        first("platformId").alias("platformId"),
        first("platformName").alias("platformName"),
        first("policies").alias("policies"),
        first("reducedFunctionalityMode").alias("reducedFunctionalityMode"),
        first("devicePolicies").alias("devicePolicies"),
        array_distinct(collect_list("groups")).alias("groups"),
        first("groupHash").alias("groupHash"),
        first("productTypeDesc").alias("productTypeDesc"),
        first("provisionStatus").alias("provisionStatus"),
        first("serialNumber").alias("serialNumber"),
        first("status").alias("status"),
        first("systemManufacturer").alias("systemManufacturer"),
        first("systemProductName").alias("systemProductName"),
        first("zoneGroup").alias("zoneGroup"),
        first("kernelVersion").alias("kernelVersion"),
        first("chassisType").alias("chassisType"),
        first("chassisTypeDesc").alias("chassisTypeDesc"),
        first("connectionIp").alias("connectionIp"),
        first("defaultGatewayIp").alias("defaultGatewayIp"),
        first("connectionMacAddress").alias("connectionMacAddress"),
        first("meta").alias("meta")
        )
    logging.info("Merged duplicates")
    return merged_df

